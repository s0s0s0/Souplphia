{"version":3,"sources":["../src/WebGLTextureLoaderAsyncHashCache.test.js"],"names":["test","gl","deleteTexture","FakeLoader","input","promise","Promise","resolve","texture","id","width","height","dispose","loader","load","res","expect","toMatchObject","get","toBe","toBeUndefined"],"mappings":";;;;AAAA;;;;;;;;;;;;;;AAEAA,KAAK,+CAAL,0DAAsD;AAAA;AAAA;AAAA;AAAA;AAAA;AAC9CC,YAD8C,GACzC;AACTC,2BAAe,yBAAM,CAAE;AADd,WADyC;;AAI9CC,oBAJ8C;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,sCAK1CC,KAL0C,EAKnC;AACb,uBAAO,OAAOA,KAAP,KAAiB,QAAxB;AACD;AAPiD;AAAA;AAAA,wCAQxCA,KARwC,EAQjC;AACf,uBAAOA,KAAP;AACD;AAViD;AAAA;AAAA,0CAWtCA,KAXsC,EAW/B;AACjB,uBAAO;AACLC,2BAASC,QAAQC,OAAR,CAAgB;AACvBC,6BAAS,EAAEC,IAAIL,KAAN,EADc;AAEvBM,2BAAO,CAFgB;AAGvBC,4BAAQ;AAHe,mBAAhB,CADJ;AAMLC,2BAAS,mBAAM,CAAE;AANZ,iBAAP;AAQD;AApBiD;;AAAA;AAAA;;AAsB9CC,gBAtB8C,GAsBrC,IAAIV,UAAJ,CAAeF,EAAf,CAtBqC;AAAA;AAAA,iBAuBpCY,OAAOC,IAAP,CAAY,EAAZ,CAvBoC;;AAAA;AAuBhDC,aAvBgD;;AAwBpDC,iBAAOD,GAAP,EAAYE,aAAZ,CAA0B;AACxBT,qBAAS,EAAEC,IAAI,EAAN,EADe;AAExBC,mBAAO,CAFiB;AAGxBC,oBAAQ;AAHgB,WAA1B;AAKAK,iBAAOH,OAAOK,GAAP,CAAW,EAAX,CAAP,EAAuBC,IAAvB,CAA4BJ,GAA5B;AACA;AACAC,iBAAOH,OAAOK,GAAP,CAAW,EAAX,CAAP,EAAuBE,aAAvB;AA/BoD;AAAA,iBAgCxCP,OAAOC,IAAP,CAAY,EAAZ,CAhCwC;;AAAA;AAgCpDC,aAhCoD;;AAiCpDC,iBAAOD,GAAP,EAAYE,aAAZ,CAA0B;AACxBT,qBAAS,EAAEC,IAAI,EAAN,EADe;AAExBC,mBAAO,CAFiB;AAGxBC,oBAAQ;AAHgB,WAA1B;AAKAK,iBAAOH,OAAOK,GAAP,CAAW,EAAX,CAAP,EAAuBC,IAAvB,CAA4BJ,GAA5B;AACAF,iBAAOD,OAAP;;AAvCoD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAtD","file":"WebGLTextureLoaderAsyncHashCache.test.js","sourcesContent":["import WebGLTextureLoaderAsyncHashCache from \"./WebGLTextureLoaderAsyncHashCache\";\n\ntest(\"WebGLTextureLoaderAsyncHashCache simple usage\", async () => {\n  const gl = {\n    deleteTexture: () => {}\n  };\n  class FakeLoader extends WebGLTextureLoaderAsyncHashCache {\n    canLoad(input) {\n      return typeof input === \"number\";\n    }\n    inputHash(input) {\n      return input;\n    }\n    loadNoCache(input) {\n      return {\n        promise: Promise.resolve({\n          texture: { id: input },\n          width: 2,\n          height: 2\n        }),\n        dispose: () => {}\n      };\n    }\n  }\n  const loader = new FakeLoader(gl);\n  let res = await loader.load(42);\n  expect(res).toMatchObject({\n    texture: { id: 42 },\n    width: 2,\n    height: 2\n  });\n  expect(loader.get(42)).toBe(res);\n  // test with another value\n  expect(loader.get(43)).toBeUndefined();\n  res = await loader.load(43);\n  expect(res).toMatchObject({\n    texture: { id: 43 },\n    width: 2,\n    height: 2\n  });\n  expect(loader.get(43)).toBe(res);\n  loader.dispose();\n});\n"]}