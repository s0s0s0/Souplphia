{"version":3,"sources":["../src/LoaderResolver.test.js"],"names":["test","gl","resolver","expect","resolve","toBeUndefined","dispose","deleteTexture","registry","FakeLoader","input","texture","id","width","height","add","loader","toBeDefined","toBeInstanceOf"],"mappings":";;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;;;AAEAA,KAAK,0CAAL,EAAiD,YAAM;AACrD,MAAMC,KAAK,EAAX;AACA,MAAMC,WAAW,6BAAmBD,EAAnB,CAAjB;AACAE,SAAOD,SAASE,OAAT,CAAiB,IAAjB,CAAP,EAA+BC,aAA/B;AACAF,SAAOD,SAASE,OAAT,CAAiB,EAAjB,CAAP,EAA6BC,aAA7B;AACAF,SAAOD,SAASE,OAAT,CAAiB,KAAjB,CAAP,EAAgCC,aAAhC;AACAH,WAASI,OAAT;AACD,CAPD;;AASAN,KAAK,sCAAL,EAA6C,YAAM;AACjD,MAAMC,KAAK;AACTM,mBAAe,yBAAM,CAAE;AADd,GAAX;AAGA,MAAMC,WAAW,+BAAjB;;AAJiD,MAK3CC,UAL2C;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,8BAMvCC,KANuC,EAMhC;AACb,eAAO,OAAOA,KAAP,KAAiB,QAAxB;AACD;AAR8C;AAAA;AAAA,gCASrCA,KATqC,EAS9B;AACf,eAAOA,KAAP;AACD;AAX8C;AAAA;AAAA,iCAYpCA,KAZoC,EAY7B;AAChB,eAAO,EAAEC,SAAS,EAAEC,IAAIF,KAAN,EAAX,EAA0BG,OAAO,CAAjC,EAAoCC,QAAQ,CAA5C,EAAP;AACD;AAd8C;;AAAA;AAAA;;AAgBjDN,WAASO,GAAT,CAAaN,UAAb;AACA,MAAMP,WAAW,6BAAmBD,EAAnB,EAAuBO,QAAvB,CAAjB;AACAL,SAAOD,SAASE,OAAT,CAAiB,IAAjB,CAAP,EAA+BC,aAA/B;AACAF,SAAOD,SAASE,OAAT,CAAiB,KAAjB,CAAP,EAAgCC,aAAhC;AACA,MAAMW,SAASd,SAASE,OAAT,CAAiB,EAAjB,CAAf;AACAD,SAAOa,MAAP,EAAeC,WAAf;AACAd,SAAOa,MAAP,EAAeE,cAAf,CAA8BT,UAA9B;AACAP,WAASI,OAAT;AACD,CAxBD","file":"LoaderResolver.test.js","sourcesContent":["import LoaderResolver from \"./LoaderResolver\";\nimport LoadersRegistry from \"./LoadersRegistry\";\nimport WebGLTextureLoaderSyncHashCache from \"./WebGLTextureLoaderSyncHashCache\";\n\ntest(\"an empty LoaderResolver resolves nothing\", () => {\n  const gl = {};\n  const resolver = new LoaderResolver(gl);\n  expect(resolver.resolve(null)).toBeUndefined();\n  expect(resolver.resolve(42)).toBeUndefined();\n  expect(resolver.resolve(\"foo\")).toBeUndefined();\n  resolver.dispose();\n});\n\ntest(\"LoaderResolver works with one loader\", () => {\n  const gl = {\n    deleteTexture: () => {}\n  };\n  const registry = new LoadersRegistry();\n  class FakeLoader extends WebGLTextureLoaderSyncHashCache {\n    canLoad(input) {\n      return typeof input === \"number\";\n    }\n    inputHash(input) {\n      return input;\n    }\n    getNoCache(input) {\n      return { texture: { id: input }, width: 2, height: 2 };\n    }\n  }\n  registry.add(FakeLoader);\n  const resolver = new LoaderResolver(gl, registry);\n  expect(resolver.resolve(null)).toBeUndefined();\n  expect(resolver.resolve(\"foo\")).toBeUndefined();\n  const loader = resolver.resolve(42);\n  expect(loader).toBeDefined();\n  expect(loader).toBeInstanceOf(FakeLoader);\n  resolver.dispose();\n});\n"]}