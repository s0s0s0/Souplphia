{"version":3,"sources":["../src/LoaderResolver.js"],"names":["LoaderResolver","gl","registry","loaders","get","map","L","forEach","l","dispose","input","find","loader","canLoad"],"mappings":";;;;;;;;AAGA;;;;;;;;IAEqBA,c;AAGnB,0BACEC,EADF,EAGE;AAAA,QADAC,QACA;;AAAA;;AACA,SAAKC,OAAL,GAAeD,SAASE,GAAT,GAAeC,GAAf,CAAmB;AAAA,aAAK,IAAIC,CAAJ,CAAML,EAAN,CAAL;AAAA,KAAnB,CAAf;AACD;;;;8BAES;AACR,WAAKE,OAAL,CAAaI,OAAb,CAAqB;AAAA,eAAKC,EAAEC,OAAF,EAAL;AAAA,OAArB;AACD;;;4BAEUC,K,EAAkC;AAC3C,aAAO,KAAKP,OAAL,CAAaQ,IAAb,CAAkB;AAAA,eAAUC,OAAOC,OAAP,CAAeH,KAAf,CAAV;AAAA,OAAlB,CAAP;AACD;;;;;;kBAhBkBV,c","file":"LoaderResolver.js","sourcesContent":["//@flow\nimport type LoadersRegistry from \"./LoadersRegistry\";\nimport type WebGLTextureLoader from \"./WebGLTextureLoader\";\nimport globalRegistry from \"./globalRegistry\";\n\nexport default class LoaderResolver {\n  loaders: Array<WebGLTextureLoader<*>>;\n\n  constructor(\n    gl: WebGLRenderingContext,\n    registry: LoadersRegistry = globalRegistry\n  ) {\n    this.loaders = registry.get().map(L => new L(gl));\n  }\n\n  dispose() {\n    this.loaders.forEach(l => l.dispose());\n  }\n\n  resolve<T>(input: T): ?WebGLTextureLoader<T> {\n    return this.loaders.find(loader => loader.canLoad(input));\n  }\n}\n"]}