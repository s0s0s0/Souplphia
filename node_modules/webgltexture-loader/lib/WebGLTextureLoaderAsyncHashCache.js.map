{"version":3,"sources":["../src/WebGLTextureLoaderAsyncHashCache.js"],"names":["neverEnding","Promise","WebGLTextureLoaderAsyncHashCache","disposes","Map","inputs","promises","results","_disposed","gl","forEach","d","disposeTexture","result","texture","clear","deleteTexture","input","hash","inputHash","maybePromise","get","loadNoCache","set","dispose","promise","then","has","delete"],"mappings":";;;;;;;;AACA;;;;;;;;;;;;AAGA,IAAMA,cAAc,IAAIC,OAAJ,CAAY,YAAM,CAAE,CAApB,CAApB;;AAEA;;;;IAGMC,gC;;;;;;;;;;;;;;0OAOJC,Q,GAA6B,IAAIC,GAAJ,E,QAC7BC,M,GAAoB,IAAID,GAAJ,E,QACpBE,Q,GAA4C,IAAIF,GAAJ,E,QAC5CG,O,GAAkC,IAAIH,GAAJ,E,QAElCI,S,GAAY,K;;AAVZ;;;;;8BAWU;AAAA;;AAAA,UACAC,EADA,GAC4C,IAD5C,CACAA,EADA;AAAA,UACIH,QADJ,GAC4C,IAD5C,CACIA,QADJ;AAAA,UACcC,OADd,GAC4C,IAD5C,CACcA,OADd;AAAA,UACuBF,MADvB,GAC4C,IAD5C,CACuBA,MADvB;AAAA,UAC+BF,QAD/B,GAC4C,IAD5C,CAC+BA,QAD/B;;AAERA,eAASO,OAAT,CAAiB;AAAA,eAAKC,GAAL;AAAA,OAAjB;AACAJ,cAAQG,OAAR,CAAgB,kBAAU;AACxB,eAAKE,cAAL,CAAoBC,OAAOC,OAA3B;AACD,OAFD;AAGAR,eAASS,KAAT;AACAR,cAAQQ,KAAR;AACAV,aAAOU,KAAP;AACAZ,eAASY,KAAT;AACA,WAAKP,SAAL,GAAiB,IAAjB;AACD;;;mCAEcM,O,EAAuB;AACpC,WAAKL,EAAL,CAAQO,aAAR,CAAsBF,OAAtB;AACD;;;yBAEIG,K,EAAU;AAAA;;AACb,UAAMC,OAAO,KAAKC,SAAL,CAAeF,KAAf,CAAb;AACA,UAAMG,eAAe,KAAKd,QAAL,CAAce,GAAd,CAAkBH,IAAlB,CAArB;AACA,UAAIE,YAAJ,EAAkB,OAAOA,YAAP;AAClB,UAAMT,IAAI,KAAKW,WAAL,CAAiBL,KAAjB,CAAV;AACA,WAAKd,QAAL,CAAcoB,GAAd,CAAkBL,IAAlB,EAAwBP,EAAEa,OAA1B;AACA,UAAMC,UAAUd,EAAEc,OAAF,CAAUC,IAAV,CAAe,kBAAU;AACvC,YAAI,CAAC,OAAKpB,QAAL,CAAcqB,GAAd,CAAkBT,IAAlB,CAAL,EAA8B;AAC5B,iBAAOlB,WAAP;AACD;AACD,eAAKG,QAAL,CAAcyB,MAAd,CAAqBV,IAArB;AACA,eAAKX,OAAL,CAAagB,GAAb,CAAiBL,IAAjB,EAAuBL,MAAvB;AACA,eAAOA,MAAP;AACD,OAPe,CAAhB;AAQA,WAAKP,QAAL,CAAciB,GAAd,CAAkBL,IAAlB,EAAwBO,OAAxB;AACA,aAAOA,OAAP;AACD;;;wBAEGR,K,EAAU;AACZ,aAAO,KAAKV,OAAL,CAAac,GAAb,CAAiB,KAAKF,SAAL,CAAeF,KAAf,CAAjB,CAAP;AACD;;;+BAEUA,K,EAAU;AACnB,UAAMC,OAAO,KAAKC,SAAL,CAAeF,KAAf,CAAb;AACA,WAAKX,QAAL,CAAcsB,MAAd,CAAqBV,IAArB;AACA,UAAMM,UAAU,KAAKrB,QAAL,CAAckB,GAAd,CAAkBH,IAAlB,CAAhB;AACA,UAAIM,OAAJ,EAAa;AACXA;AACA,aAAKrB,QAAL,CAAcyB,MAAd,CAAqBV,IAArB;AACD;AACF;;;;;;kBAGYhB,gC","file":"WebGLTextureLoaderAsyncHashCache.js","sourcesContent":["//@flow\nimport WebGLTextureLoader from \"./WebGLTextureLoader\";\nimport type { TextureAndSize } from \"./WebGLTextureLoader\";\n\nconst neverEnding = new Promise(() => {});\n\n/**\n * A cache implementation of WebGLTextureLoader with a input hash function\n */\nclass WebGLTextureLoaderAsyncHashCache<T> extends WebGLTextureLoader<T> {\n  +inputHash: (input: T) => *;\n  // An async load function that does not cache (WebGLTextureLoaderAsyncHashCache do the caching with inputHash). it also should return a dispose function to cancel a pending load\n  +loadNoCache: (\n    input: T\n  ) => { promise: Promise<TextureAndSize>, dispose: Function };\n\n  disposes: Map<*, Function> = new Map();\n  inputs: Map<*, T> = new Map();\n  promises: Map<*, Promise<TextureAndSize>> = new Map();\n  results: Map<*, TextureAndSize> = new Map();\n\n  _disposed = false;\n  dispose() {\n    const { gl, promises, results, inputs, disposes } = this;\n    disposes.forEach(d => d());\n    results.forEach(result => {\n      this.disposeTexture(result.texture);\n    });\n    promises.clear();\n    results.clear();\n    inputs.clear();\n    disposes.clear();\n    this._disposed = true;\n  }\n\n  disposeTexture(texture: WebGLTexture) {\n    this.gl.deleteTexture(texture);\n  }\n\n  load(input: T) {\n    const hash = this.inputHash(input);\n    const maybePromise = this.promises.get(hash);\n    if (maybePromise) return maybePromise;\n    const d = this.loadNoCache(input);\n    this.disposes.set(hash, d.dispose);\n    const promise = d.promise.then(result => {\n      if (!this.promises.has(hash)) {\n        return neverEnding;\n      }\n      this.disposes.delete(hash);\n      this.results.set(hash, result);\n      return result;\n    });\n    this.promises.set(hash, promise);\n    return promise;\n  }\n\n  get(input: T) {\n    return this.results.get(this.inputHash(input));\n  }\n\n  cancelLoad(input: T) {\n    const hash = this.inputHash(input);\n    this.promises.delete(hash);\n    const dispose = this.disposes.get(hash);\n    if (dispose) {\n      dispose();\n      this.disposes.delete(hash);\n    }\n  }\n}\n\nexport default WebGLTextureLoaderAsyncHashCache;\n"]}