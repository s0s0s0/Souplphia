{"version":3,"sources":["../src/ExpoCameraTextureLoader.js"],"names":["globalRegistry","WebGLTextureLoaderAsyncHashCache","NativeModules","findNodeHandle","Camera","neverEnding","Promise","available","ExponentGLObjectManager","createCameraTextureAsync","warned","ExpoCameraTextureLoader","objIds","WeakMap","canLoad","input","console","log","disposeTexture","texture","exglObjId","get","destroyObjectAsync","delete","inputHash","camera","loadNoCache","gl","__exglCtxId","exglCtxId","disposed","dispose","glView","getExtension","promise","reject","Error","then","set","width","height","priority","add"],"mappings":"AACA,SACEA,cADF,EAEEC,gCAFF,QAGO,qBAHP;AAIA,SAASC,aAAT,EAAwBC,cAAxB,QAA8C,cAA9C;AACA,SAASC,MAAT,QAAuB,MAAvB;;AAEA,MAAMC,cAAc,IAAIC,OAAJ,CAAY,MAAM,CAAE,CAApB,CAApB;;AAEA,MAAMC,YAAY,CAAC,EACjBL,cAAcM,uBAAd,IACAN,cAAcM,uBAAd,CAAsCC,wBAFrB,CAAnB;;AAKA,IAAIC,SAAS,KAAb;;AAEA,MAAMC,uBAAN,SAAsCV,gCAAtC,CAA+E;AAAA;AAAA;;AAAA,wCAG7EW,MAH6E,GAGrC,IAAIC,OAAJ,EAHqC;AAAA;;AAK7EC,UAAQC,KAAR,EAAoB;AAClB,QAAIA,SAASA,iBAAiBX,MAA9B,EAAsC;AACpC,UAAIG,SAAJ,EAAe,OAAO,IAAP;AACf,UAAI,CAACG,MAAL,EAAa;AACXA,iBAAS,IAAT;AACAM,gBAAQC,GAAR,CACE,2IADF;AAGD;AACF;AACD,WAAO,KAAP;AACD;;AAEDC,iBAAeC,OAAf,EAAsC;AACpC,UAAMC,YAAY,KAAKR,MAAL,CAAYS,GAAZ,CAAgBF,OAAhB,CAAlB;AACA,QAAIC,SAAJ,EAAe;AACblB,oBAAcM,uBAAd,CAAsCc,kBAAtC,CAAyDF,SAAzD;AACD;AACD,SAAKR,MAAL,CAAYW,MAAZ,CAAmBJ,OAAnB;AACD;;AAEDK,YAAUC,MAAV,EAA0B;AACxB,WAAOtB,eAAesB,MAAf,CAAP;AACD;;AAEDC,cAAYD,MAAZ,EAA4B;AAC1B,UAAM,EAAEE,EAAF,KAAS,IAAf;AACA;AACA,UAAM,EAAEC,aAAaC,SAAf,KAA6BF,EAAnC;AACA,QAAIG,WAAW,KAAf;AACA,UAAMC,UAAU,MAAM;AACpBD,iBAAW,IAAX;AACD,KAFD;AAGA,UAAME,SAASL,GAAGM,YAAH,CAAgB,WAAhB,CAAf;AACA,UAAMC,UAAsB,CAACF,MAAD,GACxB1B,QAAQ6B,MAAR,CAAe,IAAIC,KAAJ,CAAU,yBAAV,CAAf,CADwB,GAExBJ,OAAOvB,wBAAP,CAAgCgB,MAAhC,EAAwCY,IAAxC,CAA6ClB,WAAW;AACtD,UAAIW,QAAJ,EAAc,OAAOzB,WAAP;AACd;AACA,WAAKO,MAAL,CAAY0B,GAAZ,CAAgBnB,OAAhB,EAAyBA,QAAQC,SAAjC;AACA,YAAMmB,QAAQ,CAAd;AACA,YAAMC,SAAS,CAAf;AACA;AACA,aAAO,EAAErB,OAAF,EAAWoB,KAAX,EAAkBC,MAAlB,EAAP;AACD,KARD,CAFJ;AAWA,WAAO,EAAEN,OAAF,EAAWH,OAAX,EAAP;AACD;AAnD4E;;AAAzEpB,uB,CACG8B,Q,GAAW,CAAC,G;AAqDrBzC,eAAe0C,GAAf,CAAmB/B,uBAAnB;;AAEA,eAAeA,uBAAf","file":"ExpoCameraTextureLoader.js","sourcesContent":["//@flow\nimport {\n  globalRegistry,\n  WebGLTextureLoaderAsyncHashCache\n} from \"webgltexture-loader\";\nimport { NativeModules, findNodeHandle } from \"react-native\";\nimport { Camera } from \"expo\";\n\nconst neverEnding = new Promise(() => {});\n\nconst available = !!(\n  NativeModules.ExponentGLObjectManager &&\n  NativeModules.ExponentGLObjectManager.createCameraTextureAsync\n);\n\nlet warned = false;\n\nclass ExpoCameraTextureLoader extends WebGLTextureLoaderAsyncHashCache<Camera> {\n  static priority = -199;\n\n  objIds: WeakMap<WebGLTexture, number> = new WeakMap();\n\n  canLoad(input: any) {\n    if (input && input instanceof Camera) {\n      if (available) return true;\n      if (!warned) {\n        warned = true;\n        console.log(\n          \"webgltexture-loader-expo: ExponentGLObjectManager.createCameraTextureAsync is not available. Make sure to use the correct version of Expo\"\n        );\n      }\n    }\n    return false;\n  }\n\n  disposeTexture(texture: WebGLTexture) {\n    const exglObjId = this.objIds.get(texture);\n    if (exglObjId) {\n      NativeModules.ExponentGLObjectManager.destroyObjectAsync(exglObjId);\n    }\n    this.objIds.delete(texture);\n  }\n\n  inputHash(camera: Camera) {\n    return findNodeHandle(camera);\n  }\n\n  loadNoCache(camera: Camera) {\n    const { gl } = this;\n    // $FlowFixMe\n    const { __exglCtxId: exglCtxId } = gl;\n    let disposed = false;\n    const dispose = () => {\n      disposed = true;\n    };\n    const glView = gl.getExtension(\"GLViewRef\");\n    const promise: Promise<*> = !glView\n      ? Promise.reject(new Error(\"GLViewRef not available\"))\n      : glView.createCameraTextureAsync(camera).then(texture => {\n          if (disposed) return neverEnding;\n          // $FlowFixMe\n          this.objIds.set(texture, texture.exglObjId);\n          const width = 0;\n          const height = 0;\n          // ^ any way to retrieve these ?\n          return { texture, width, height };\n        });\n    return { promise, dispose };\n  }\n}\n\nglobalRegistry.add(ExpoCameraTextureLoader);\n\nexport default ExpoCameraTextureLoader;\n"]}