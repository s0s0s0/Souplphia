{"version":3,"sources":["../src/DeprecatedExpoGLObjectTextureLoader.js"],"names":["globalRegistry","WebGLTextureLoaderAsyncHashCache","NativeModules","neverEnding","Promise","available","ExponentGLObjectManager","createObjectAsync","warned","ExpoGLObjectTextureLoader","objIds","WeakMap","canLoad","input","console","log","disposeTexture","texture","exglObjId","get","destroyObjectAsync","delete","inputHash","config","JSON","stringify","loadNoCache","gl","__exglCtxId","exglCtxId","disposed","dispose","promise","then","WebGLTexture","set","width","height","priority","add"],"mappings":"AACA,SACEA,cADF,EAEEC,gCAFF,QAGO,qBAHP;AAIA,SAASC,aAAT,QAA8B,cAA9B;;AAEA,MAAMC,cAAc,IAAIC,OAAJ,CAAY,MAAM,CAAE,CAApB,CAApB;;AAEA,MAAMC,YAAY,CAAC,EACjBH,cAAcI,uBAAd,IACAJ,cAAcI,uBAAd,CAAsCC,iBAFrB,CAAnB;;AAKA,IAAIC,SAAS,KAAb;;AAEA,MAAMC,yBAAN,SAAwCR,gCAAxC,CAEE;AAAA;AAAA;;AAAA,wCAGAS,MAHA,GAGwC,IAAIC,OAAJ,EAHxC;AAAA;;AAKAC,UAAQC,KAAR,EAAoB;AAClB,QAAI,CAACR,SAAD,IAAc,CAACG,MAAnB,EAA2B;AACzBA,eAAS,IAAT;AACAM,cAAQC,GAAR,CACE,oIADF;AAGD;AACD,WAAOV,aAAa,OAAOQ,KAAP,KAAiB,QAArC;AACD;;AAEDG,iBAAeC,OAAf,EAAsC;AACpC,UAAMC,YAAY,KAAKR,MAAL,CAAYS,GAAZ,CAAgBF,OAAhB,CAAlB;AACA,QAAIC,SAAJ,EAAe;AACbhB,oBAAcI,uBAAd,CAAsCc,kBAAtC,CAAyDF,SAAzD;AACD;AACD,SAAKR,MAAL,CAAYW,MAAZ,CAAmBJ,OAAnB;AACD;;AAEDK,YAAUC,MAAV,EAA0B;AACxB;AACA,WAAOC,KAAKC,SAAL,CAAeF,MAAf,CAAP;AACD;;AAEDG,cAAYH,MAAZ,EAA4B;AAC1B,UAAM,EAAEI,EAAF,KAAS,IAAf;AACA;AACA,UAAM,EAAEC,aAAaC,SAAf,KAA6BF,EAAnC;AACA,QAAIG,WAAW,KAAf;AACA,UAAMC,UAAU,MAAM;AACpBD,iBAAW,IAAX;AACD,KAFD;AAGA,UAAME,UAAU9B,cAAcI,uBAAd,CAAsCC,iBAAtC,CAAwD;AACtEsB,eADsE;AAEtEZ,eAASM;AAF6D,KAAxD,EAGbU,IAHa,CAGR,CAAC,EAAEf,SAAF,EAAD,KAAmB;AACzB,UAAIY,QAAJ,EAAc,OAAO3B,WAAP;AACd;AACA,YAAMc,UAAU,IAAIiB,YAAJ,CAAiBhB,SAAjB,CAAhB;AACA,WAAKR,MAAL,CAAYyB,GAAZ,CAAgBlB,OAAhB,EAAyBC,SAAzB;AACA,YAAMkB,QAAQ,CAAd;AACA,YAAMC,SAAS,CAAf;AACA;AACA,aAAO,EAAEpB,OAAF,EAAWmB,KAAX,EAAkBC,MAAlB,EAAP;AACD,KAZe,CAAhB;AAaA,WAAO,EAAEL,OAAF,EAAWD,OAAX,EAAP;AACD;AAlDD;;AAFItB,yB,CAGG6B,Q,GAAW,CAAC,G;AAoDrBtC,eAAeuC,GAAf,CAAmB9B,yBAAnB;;AAEA,eAAeA,yBAAf","file":"DeprecatedExpoGLObjectTextureLoader.js","sourcesContent":["//@flow\nimport {\n  globalRegistry,\n  WebGLTextureLoaderAsyncHashCache\n} from \"webgltexture-loader\";\nimport { NativeModules } from \"react-native\";\n\nconst neverEnding = new Promise(() => {});\n\nconst available = !!(\n  NativeModules.ExponentGLObjectManager &&\n  NativeModules.ExponentGLObjectManager.createObjectAsync\n);\n\nlet warned = false;\n\nclass ExpoGLObjectTextureLoader extends WebGLTextureLoaderAsyncHashCache<\n  Object\n> {\n  static priority = -200;\n\n  objIds: WeakMap<WebGLTexture, number> = new WeakMap();\n\n  canLoad(input: any) {\n    if (!available && !warned) {\n      warned = true;\n      console.log(\n        \"webgltexture-loader-expo: ExponentGLObjectManager.createObjectAsync is not available. Make sure to use the correct version of Expo\"\n      );\n    }\n    return available && typeof input === \"object\";\n  }\n\n  disposeTexture(texture: WebGLTexture) {\n    const exglObjId = this.objIds.get(texture);\n    if (exglObjId) {\n      NativeModules.ExponentGLObjectManager.destroyObjectAsync(exglObjId);\n    }\n    this.objIds.delete(texture);\n  }\n\n  inputHash(config: Object) {\n    // JSON.stringify is a quick way to hash the config object\n    return JSON.stringify(config);\n  }\n\n  loadNoCache(config: Object) {\n    const { gl } = this;\n    // $FlowFixMe\n    const { __exglCtxId: exglCtxId } = gl;\n    let disposed = false;\n    const dispose = () => {\n      disposed = true;\n    };\n    const promise = NativeModules.ExponentGLObjectManager.createObjectAsync({\n      exglCtxId,\n      texture: config\n    }).then(({ exglObjId }) => {\n      if (disposed) return neverEnding;\n      // $FlowFixMe\n      const texture = new WebGLTexture(exglObjId);\n      this.objIds.set(texture, exglObjId);\n      const width = 0;\n      const height = 0;\n      // ^ unfortunately there is no way to retrieve these\n      return { texture, width, height };\n    });\n    return { promise, dispose };\n  }\n}\n\nglobalRegistry.add(ExpoGLObjectTextureLoader);\n\nexport default ExpoGLObjectTextureLoader;\n"]}