var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

import React, { Component } from "react";
import PropTypes from "prop-types";
import { View } from "react-native";
import { GLView as EXGLView } from "expo";

const propTypes = {
  onContextCreate: PropTypes.func.isRequired,
  style: PropTypes.any
};

export default class GLViewNative extends Component {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.onRef = ref => {
      this.ref = ref;
    }, this.onContextCreate = gl => {
      const { getExtension } = gl;
      // monkey patch to get a way to access the EXGLView
      // $FlowFixMe
      gl.getExtension = name => {
        if (name === "GLViewRef") return this.ref;
        return getExtension.call(gl, name);
      };
      this.props.onContextCreate(gl);
    }, this.capture = opt => {
      const { ref } = this;
      if (!ref) return Promise.reject(new Error("glView is unmounted"));
      return ref.takeSnapshotAsync(opt);
    }, _temp;
  }

  afterDraw(gl) {
    gl.flush();
    // $FlowFixMe
    gl.endFrameEXP();
  }

  render() {
    const _props = this.props,
          { style, onContextCreate, children } = _props,
          rest = _objectWithoutProperties(_props, ["style", "onContextCreate", "children"]);
    if (__DEV__) {
      if ("width" in rest || "height" in rest) {
        console.warn("gl-react-expo <Surface>: no such width/height prop. instead you must use the style prop like for a <View>.");
      }
    }
    return React.createElement(
      View,
      _extends({}, rest, {
        style: [{ position: "relative", overflow: "hidden" }, style]
      }),
      React.createElement(EXGLView, {
        style: [style, {
          flex: 1,
          position: "absolute",
          top: 0,
          left: 0
        }],
        onContextCreate: this.onContextCreate,
        ref: this.onRef
      }),
      React.createElement(
        View,
        { style: { opacity: 0 } },
        children
      )
    );
  }
}
GLViewNative.propTypes = propTypes;
//# sourceMappingURL=GLViewNative.js.map