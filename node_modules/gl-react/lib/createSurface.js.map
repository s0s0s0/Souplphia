{"version":3,"sources":["../src/createSurface.js"],"names":["__DEV__","process","env","NODE_ENV","prependGLSLName","glsl","name","SurfacePropTypes","children","any","isRequired","style","preload","array","onLoad","func","onLoadError","onContextLost","onContextRestored","visitor","object","surfaceId","_instances","list","slice","allSurfaceProps","Object","keys","GLView","RenderLessElement","mapRenderableContent","requestFrame","cancelFrame","id","shaders","_preparingGL","_needsRedraw","state","ready","rebootId","debug","redraw","flush","_draw","_onContextCreate","gl","onSuccess","setState","_handleLoad","e","_handleError","_prepareGL","_onContextFailure","_onContextLost","props","_stopLoop","_destroyGL","root","_onContextRestored","_handleRestoredSuccess","_handleRestoredFailure","_onRef","ref","glView","console","error","_startLoop","warn","getGLName","glParent","glSurface","glSizable","push","getVisitors","forEach","v","onSurfaceMount","i","indexOf","splice","onSurfaceUnmount","rest","key","get","concat","drawingBufferWidth","drawingBufferHeight","captureAsDataURL","displayName","captureAsBlob","x","y","w","h","capture","_emptyTexture","createTexture","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","Uint8Array","deleteTexture","loaderResolver","dispose","k","deleteBuffer","buffer","map","onSurfaceGLContextChange","onError","pixelStorei","UNPACK_FLIP_Y_WEBGL","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","all","raw","_resolveTextureLoader","loader","input","loadedAlready","load","length","Promise","then","node","_addDependent","resolve","frag","vert","shader","attributes","_p","pointer","shaderId","_makeShader","getName","bindFramebuffer","FRAMEBUFFER","getGLSize","width","height","viewport","_loopRaf","loop","visitors","onSurfaceDrawSkipped","onSurfaceDrawStart","beforeDraw","silent","onSurfaceDrawError","debugError","longMessage","afterDraw","onSurfaceDrawEnd","propTypes","childContextTypes"],"mappings":";;;;;;;;;;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;AAQA,IAAMA,UAAUC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,aAAzC;;AAEA,IAAMC,kBAAkB,SAAlBA,eAAkB,CAACC,IAAD,EAAeC,IAAf;AAAA,SACtB,CAACA,IAAD,GAAQD,IAAR,GAAe,yBAAyBC,IAAzB,GAAgC,IAAhC,GAAuCD,IADhC;AAAA,CAAxB;;AAsDA,IAAME,mBAAmB;AACvBC,YAAU,oBAAUC,GAAV,CAAcC,UADD;AAEvBC,SAAO,oBAAUF,GAFM;AAGvBG,WAAS,oBAAUC,KAHI;AAIvBC,UAAQ,oBAAUC,IAJK;AAKvBC,eAAa,oBAAUD,IALA;AAMvBE,iBAAe,oBAAUF,IANF;AAOvBG,qBAAmB,oBAAUH,IAPN;AAQvBI,WAAS,oBAAUC;AARI,CAAzB;;AAWA,IAAIC,YAAY,CAAhB;AACA,IAAMC,aAA8B,EAApC;AACO,IAAMC,sBAAO,SAAPA,IAAO;AAAA,SAAuBD,WAAWE,KAAX,CAAiB,CAAjB,CAAvB;AAAA,CAAb;;AAEP,IAAMC,kBAAkBC,OAAOC,IAAP,CAAYpB,gBAAZ,CAAxB;;kBAUe,gBAMqB;AAAA;;AAAA,MALlCqB,MAKkC,QALlCA,MAKkC;AAAA,MAJlCC,iBAIkC,QAJlCA,iBAIkC;AAAA,MAHlCC,oBAGkC,QAHlCA,oBAGkC;AAAA,MAFlCC,YAEkC,QAFlCA,YAEkC;AAAA,MADlCC,WACkC,QADlCA,WACkC;;AAClC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqDA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA,4LAEEC,EAFF,GAEe,EAAEZ,SAFjB,QAQEa,OARF,GAQuC,EARvC,QASEC,YATF,GAS2B,EAT3B,QAUEC,YAVF,GAU0B,KAV1B,QAWEC,KAXF,GAeM;AACFC,eAAO,KADL;AAEFC,kBAAU,CAFR;AAGFC,eAAO;AAHL,OAfN,QAqBEX,iBArBF,GAqBsBA,iBArBtB,QAsBEC,oBAtBF,GAsByBA,oBAtBzB,QAwKEW,MAxKF,GAwKW,YAAY;AACnB,cAAKL,YAAL,GAAoB,IAApB;AACD,OA1KH,QAkLEM,KAlLF,GAkLU,YAAY;AAClB,cAAKC,KAAL;AACD,OApLH,QAgNEC,gBAhNF,GAgNqB,UAACC,EAAD,EAAqC;AACtD,YAAMC,YAAY,SAAZA,SAAY,GAAM;AACtB,gBAAKC,QAAL,CACE;AACET,mBAAO;AADT,WADF,EAIE,YAAM;AACJ,gBAAI;AACF,oBAAKU,WAAL;AACD,aAFD,CAEE,OAAOC,CAAP,EAAU;AACV,oBAAKC,YAAL,CAAkBD,CAAlB;AACD;AACF,WAVH;AAYD,SAbD;AAcA,cAAKE,UAAL,CAAgBN,EAAhB,EAAoBC,SAApB,EAA+B,MAAKI,YAApC;AACD,OAhOH,QAkOEE,iBAlOF,GAkOsB,UAACH,CAAD,EAAoB;AACtC,cAAKC,YAAL,CAAkBD,CAAlB;AACD,OApOH,QAsOEI,cAtOF,GAsOmB,YAAY;AAC3B,YAAI,MAAKC,KAAL,CAAWrC,aAAf,EAA8B,MAAKqC,KAAL,CAAWrC,aAAX;AAC9B,cAAKsC,SAAL;AACA,cAAKC,UAAL;AACA,YAAI,MAAKC,IAAT,EAAe,MAAKA,IAAL,CAAUJ,cAAV;AAChB,OA3OH,QA6OEK,kBA7OF,GA6OuB,UAACb,EAAD,EAA+B;AAClD,YAAI,MAAKY,IAAT,EAAe,MAAKA,IAAL,CAAUC,kBAAV,CAA6Bb,EAA7B;AACf,cAAKM,UAAL,CACEN,EADF,EAEE,MAAKc,sBAFP,EAGE,MAAKC,sBAHP;AAKD,OApPH,QA2TEC,MA3TF,GA2TW,UAACC,GAAD,EAAwB;AAC/B,cAAKC,MAAL,GAAcD,GAAd;AACD,OA7TH,QA8UEZ,YA9UF,GA8UiB,UAACD,CAAD,EAAoB;AAAA,YACzBjC,WADyB,GACT,MAAKsC,KADI,CACzBtC,WADyB;;AAEjC,YAAIA,WAAJ,EAAiBA,YAAYiC,CAAZ,EAAjB,KACK;AACHe,kBAAQC,KAAR,CAAchB,CAAd;AACD;AACF,OApVH,QAsVEW,sBAtVF,GAsV2B,YAAY;AACnC;AACD,OAxVH,QA0VED,sBA1VF,GA0V2B,YAAY;AACnC,cAAKlB,MAAL;AACA,cAAKC,KAAL;AACA,cAAKwB,UAAL;AACA,YAAI,MAAKZ,KAAL,CAAWpC,iBAAf,EAAkC,MAAKoC,KAAL,CAAWpC,iBAAX;AACnC,OA/VH,QAiWE8B,WAjWF,GAiWgB,YAAY;AACxB,YAAI,CAAC,MAAKS,IAAV,EAAgB;AACdO,kBAAQG,IAAR,CACE,MAAKC,SAAL,KAAmB,kDADrB;AAGD;AALuB,YAMhBtD,MANgB,GAML,MAAKwC,KANA,CAMhBxC,MANgB;;AAOxB,cAAK2B,MAAL;AACA,cAAKC,KAAL;AACA,cAAKwB,UAAL;AACA,YAAIpD,MAAJ,EAAYA;AACb,OA5WH;AAAA;;AAAA;AAAA;AAAA,wCA+BoC;AAChC,eAAO;AACLuD,oBAAU,IADL;AAELC,qBAAW,IAFN;AAGLC,qBAAW;AAHN,SAAP;AAKD;AArCH;AAAA;AAAA,0CAuCsB;AAAA;;AAClBjD,mBAAWkD,IAAX,CAAgB,IAAhB;AACA,aAAKC,WAAL,GAAmBC,OAAnB,CAA2B;AAAA,iBAAKC,EAAEC,cAAF,QAAL;AAAA,SAA3B;AACD;AA1CH;AAAA;AAAA,6CA4CyB;AAAA;;AACrB,aAAKrB,SAAL;AACA,aAAKC,UAAL;AACA,YAAMqB,IAAIvD,WAAWwD,OAAX,CAAmB,IAAnB,CAAV;AACA,YAAID,MAAM,CAAC,CAAX,EAAcvD,WAAWyD,MAAX,CAAkBF,CAAlB,EAAqB,CAArB;AACd,aAAKJ,WAAL,GAAmBC,OAAnB,CAA2B;AAAA,iBAAKC,EAAEK,gBAAF,QAAL;AAAA,SAA3B;AACD;AAlDH;AAAA;AAAA,2CAoDuB;AACnB,aAAKvC,MAAL;AACD;AAtDH;AAAA;AAAA,+BAwDW;AAAA,YACCa,KADD,GAC8C,IAD9C,CACCA,KADD;AAAA,qBAC8C,IAD9C,CACQjB,KADR;AAAA,YACiBC,KADjB,UACiBA,KADjB;AAAA,YACwBC,QADxB,UACwBA,QADxB;AAAA,YACkCC,KADlC,UACkCA,KADlC;AAAA,YAEChC,QAFD,GAEqB8C,KAFrB,CAEC9C,QAFD;AAAA,YAEWG,KAFX,GAEqB2C,KAFrB,CAEW3C,KAFX;;AAIP;;AACA,YAAMsE,OAAO,EAAb;AACAvD,eAAOC,IAAP,CAAY2B,KAAZ,EAAmBoB,OAAnB,CAA2B,eAAO;AAChC,cAAIjD,gBAAgBqD,OAAhB,CAAwBI,GAAxB,MAAiC,CAAC,CAAtC,EAAyC;AACvCD,iBAAKC,GAAL,IAAY5B,MAAM4B,GAAN,CAAZ;AACD;AACF,SAJD;;AAMA,eACE;AAAC,gBAAD;AAAA;AACE,iBAAK3C,QADP;AAEE,mBAAOC,KAFT;AAGE,iBAAK,KAAKqB,MAHZ;AAIE,6BAAiB,KAAKjB,gBAJxB;AAKE,8BAAkB,KAAKQ,iBALzB;AAME,2BAAe,KAAKC,cANtB;AAOE,+BAAmB,KAAKK,kBAP1B;AAQE,mBAAO/C;AART,aASMsE,IATN;AAWG3C,kBAAQ9B,QAAR,GAAmB;AAXtB,SADF;AAeD;AAnFH;AAAA;AAAA,uCAqFmB;AACf;AACA,aAAK+C,SAAL;AACA,aAAKC,UAAL;AACA,aAAKT,QAAL,CAAc;AAAA,cAAGR,QAAH,SAAGA,QAAH;AAAA,iBAAmB;AAC/BA,sBAAUA,WAAW,CADU;AAE/BD,mBAAO,KAFwB;AAG/BE,mBAAO;AAHwB,WAAnB;AAAA,SAAd;AAKD;AA9FH;AAAA;AAAA,oCAgGoC;AAChC,eAAO,mBAAS2C,GAAT,GAAeC,MAAf,CAAsB,KAAK9B,KAAL,CAAWnC,OAAX,IAAsB,EAA5C,CAAP;AACD;AAlGH;AAAA;AAAA,kCAoGgC;AAAA,YACpB0B,EADoB,GACb,IADa,CACpBA,EADoB;;AAE5B,eAAO,CAACA,KAAKA,GAAGwC,kBAAR,GAA6B,CAA9B,EAAiCxC,KAAKA,GAAGyC,mBAAR,GAA8B,CAA/D,CAAP;AACD;AAvGH;AAAA;AAAA,kCAyGsB;AAClB,4BAAkB,KAAKrD,EAAvB;AACD;AA3GH;AAAA;AAAA,uCA6G2B;AACvB,eAAO,SAAP;AACD;;AAED;;;;;;;;AAjHF;AAAA;AAAA,yCAwHyC;AAAA,YAC7B8B,MAD6B,GAClB,IADkB,CAC7BA,MAD6B;;AAErC,iCAAUA,MAAV,EAAkB,mBAAlB;AACA,iCACEA,OAAOwB,gBADT,EAEE,uCAFF,EAGE3D,OAAO4D,WAAP,IAAsB5D,OAAOtB,IAH/B;AAKA,eAAOyD,OAAOwB,gBAAP,yBAAP;AACD;;AAED;;;;;;;;AAnIF;AAAA;AAAA,sCA0I6C;AAAA,YACjCxB,MADiC,GACtB,IADsB,CACjCA,MADiC;;AAEzC,iCAAUA,MAAV,EAAkB,mBAAlB;AACA,iCACEA,OAAO0B,aADT,EAEE,oCAFF,EAGE7D,OAAO4D,WAAP,IAAsB5D,OAAOtB,IAH/B;AAKA,eAAOyD,OAAO0B,aAAP,yBAAP;AACD;;AAED;;;;;;AArJF;AAAA;AAAA,8BA0JUC,CA1JV,EA0JsBC,CA1JtB,EA0JkCC,CA1JlC,EA0J8CC,CA1J9C,EA0JmE;AAC/D,iCACE,KAAKpC,IADP,EAEE,uEAFF;AAIA,eAAO,KAAKA,IAAL,CAAUqC,OAAV,CAAkBJ,CAAlB,EAAqBC,CAArB,EAAwBC,CAAxB,EAA2BC,CAA3B,CAAP;AACD;;AAED;;;;;;;;AAUA;;;;;;;AA5KF;AAAA;AAAA,sCAsL2B;AACvB,eAAO,CAAC,CAAC,KAAKhD,EAAd;AACD;AAxLH;AAAA;AAAA,wCA2LkC;AAAA,YACxBA,EADwB,GACF,IADE,CACxBA,EADwB;AAAA,YACpBkD,aADoB,GACF,IADE,CACpBA,aADoB;;AAE9B,iCAAUlD,EAAV,EAAc,iDAAd;AACA,YAAI,CAACkD,aAAL,EAAoB;AAClB,eAAKA,aAAL,GAAqBA,gBAAgBlD,GAAGmD,aAAH,EAArC;AACAnD,aAAGoD,WAAH,CAAepD,GAAGqD,UAAlB,EAA8BH,aAA9B;AACAlD,aAAGsD,UAAH,CACEtD,GAAGqD,UADL,EAEE,CAFF,EAGErD,GAAGuD,IAHL,EAIE,CAJF,EAKE,CALF,EAME,CANF,EAOEvD,GAAGuD,IAPL,EAQEvD,GAAGwD,aARL,EASE,IAAIC,UAAJ,CAAe,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,EAAqC,CAArC,EAAwC,CAAxC,EAA2C,CAA3C,EAA8C,CAA9C,CAAf,CATF;AAWD;AACD,eAAOP,aAAP;AACD;AA9MH;AAAA;AAAA,mCAsPe;AAAA;;AAAA,YACHlD,EADG,GACI,IADJ,CACHA,EADG;;AAEX,YAAIA,EAAJ,EAAQ;AACN,eAAKA,EAAL,GAAU,IAAV;AACA,cAAI,KAAKkD,aAAT,EAAwB;AACtBlD,eAAG0D,aAAH,CAAiB,KAAKR,aAAtB;AACA,iBAAKA,aAAL,GAAqB,IAArB;AACD;AACD,cAAI,KAAKS,cAAT,EAAyB;AACvB,iBAAKA,cAAL,CAAoBC,OAApB;AACD;AACD,eAAK,IAAIC,CAAT,IAAc,KAAKxE,OAAnB,EAA4B;AAC1B,iBAAKA,OAAL,CAAawE,CAAb,EAAgBD,OAAhB;AACD;AACD,eAAKvE,OAAL,GAAe,EAAf;AACAW,aAAG8D,YAAH,CAAgB,KAAKC,MAArB;AACA,eAAKnC,WAAL,GAAmBoC,GAAnB,CAAuB;AAAA,mBAAKlC,EAAEmC,wBAAF,SAAiC,IAAjC,CAAL;AAAA,WAAvB;AACD;AACF;AAxQH;AAAA;AAAA,iCA2QIjE,EA3QJ,EA4QIC,SA5QJ,EA6QIiE,OA7QJ,EA8QI;AAAA;;AACA,aAAKlE,EAAL,GAAUA,EAAV;AACA,aAAK4B,WAAL,GAAmBoC,GAAnB,CAAuB;AAAA,iBAAKlC,EAAEmC,wBAAF,SAAiCjE,EAAjC,CAAL;AAAA,SAAvB;;AAEA,aAAK2D,cAAL,GAAsB,uCAAmB3D,EAAnB,CAAtB;;AAEAA,WAAGmE,WAAH,CAAenE,GAAGoE,mBAAlB,EAAuC,CAAvC;;AAEA,YAAML,SAAS/D,GAAGqE,YAAH,EAAf;AACArE,WAAGsE,UAAH,CAActE,GAAGuE,YAAjB,EAA+BR,MAA/B;AACA/D,WAAGwE,UAAH,CACExE,GAAGuE,YADL,EAEE,IAAIE,YAAJ,CAAiB,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,EAAS,CAAC,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAC,CAApB,CAAjB,CAFF,EAE4C;AAC1CzE,WAAG0E,WAHL;AAKA,aAAKX,MAAL,GAAcA,MAAd;;AAfA,YAiBQhG,OAjBR,GAiBoB,KAAK0C,KAjBzB,CAiBQ1C,OAjBR;;;AAmBA,YAAM4G,MAAyB,EAA/B;;AAEA,SAAC5G,WAAW,EAAZ,EAAgB8D,OAAhB,CAAwB,eAAO;AAC7B,cAAI,CAAC+C,GAAL,EAAU;AACRzD,oBAAQG,IAAR,CAAa,qBAAb,EAAoCsD,GAApC;AACA;AACD;;AAJ4B,uCAKH,OAAKC,qBAAL,CAA2BD,GAA3B,CALG;AAAA,cAKrBE,MALqB,0BAKrBA,MALqB;AAAA,cAKbC,KALa,0BAKbA,KALa;;AAM7B,cAAI,CAACD,MAAL,EAAa;AACX3D,oBAAQG,IAAR,CAAa,qBAAb,EAAoCsD,GAApC,EAAyCG,KAAzC;AACA;AACD;AACD,cAAMC,gBAAgBF,OAAOxC,GAAP,CAAWyC,KAAX,CAAtB;AACA,cAAIC,aAAJ,EAAmB;AACnBL,cAAIhD,IAAJ,CAASmD,OAAOG,IAAP,CAAYF,KAAZ,CAAT;AACD,SAbD;;AAeA,aAAKzF,YAAL,GAAoBqF,GAApB;;AAEA,YAAIA,IAAIO,MAAJ,GAAa,CAAjB,EAAoB;AAClBC,kBAAQR,GAAR,CAAYA,GAAZ,EAAiBS,IAAjB,CAAsBnF,SAAtB,EAAiCiE,OAAjC,EADkB,CACyB;AAC5C,SAFD,MAEO;AACLjE;AACD;AACF;AAzTH;AAAA;AAAA,sCA+TkBoF,IA/TlB,EA+ToC;AAChC,iCACE,CAAC,KAAKzE,IADR,EAEE,kDAFF,EAGE,KAAKA,IAAL,IAAa,KAAKA,IAAL,CAAUW,SAAV,EAHf;AAKA,aAAKX,IAAL,GAAYyE,IAAZ;AACAA,aAAKC,aAAL,CAAmB,IAAnB;AACA,aAAK1F,MAAL;AACD;AAxUH;AAAA;AAAA,yCAyUqByF,IAzUrB,EAyUuC;AACnC,aAAKzE,IAAL,GAAY,IAAZ;AACA,aAAKhB,MAAL;AACD;AA5UH;AAAA;AAAA,4CA+WIgF,GA/WJ,EAgXoD;AAChD,YAAIG,QAAQH,GAAZ;AACA,YAAIE,SACF,KAAKnB,cAAL,IAAuB,KAAKA,cAAL,CAAoB4B,OAApB,CAA4BR,KAA5B,CADzB;AAEA,eAAO,EAAED,cAAF,EAAUC,YAAV,EAAP;AACD;AArXH;AAAA;AAAA,yCAuX0CtH,IAvX1C,EAuXiE;AAAA,YAAjD+H,IAAiD,SAAjDA,IAAiD;AAAA,YAA3CC,IAA2C,SAA3CA,IAA2C;AAAA,YACrDzF,EADqD,GAC9C,IAD8C,CACrDA,EADqD;;AAE7D,iCAAUA,EAAV,EAAc,qBAAd;AACA,YAAM0F,SAAS,wBACb1F,EADa,EAEbzC,gBAAgBkI,IAAhB,EAAsBhI,IAAtB,CAFa,EAGbF,gBAAgBiI,IAAhB,EAAsB/H,IAAtB,CAHa,CAAf;AAKAiI,eAAOC,UAAP,CAAkBC,EAAlB,CAAqBC,OAArB;AACA,eAAOH,MAAP;AACD;AAjYH;AAAA;AAAA,iCAmYaI,QAnYb,EAmYiD;AAAA,YACrCzG,OADqC,GACzB,IADyB,CACrCA,OADqC;;AAE7C,eACEA,QAAQyG,SAAS1G,EAAjB,MACCC,QAAQyG,SAAS1G,EAAjB,IAAuB,KAAK2G,WAAL,CACtB,kBAAQzD,GAAR,CAAYwD,QAAZ,CADsB,EAEtB,kBAAQE,OAAR,CAAgBF,QAAhB,CAFsB,CADxB,CADF;AAOD;AA5YH;AAAA;AAAA,sCA8YwB;AAAA,YACZ9F,EADY,GACL,IADK,CACZA,EADY;;AAEpB,iCAAUA,EAAV,EAAc,0BAAd;AACAA,WAAGiG,eAAH,CAAmBjG,GAAGkG,WAAtB,EAAmC,IAAnC;;AAHoB,yBAII,KAAKC,SAAL,EAJJ;AAAA;AAAA,YAIbC,KAJa;AAAA,YAINC,MAJM;;AAKpBrG,WAAGsG,QAAH,CAAY,CAAZ,EAAe,CAAf,EAAkBF,KAAlB,EAAyBC,MAAzB;AACD;AApZH;AAAA;AAAA,mCAuZqB;AAAA;;AACjBlH,oBAAY,KAAKoH,QAAjB;AACA,YAAMC,OAAO,SAAPA,IAAO,GAAM;AACjB,iBAAKD,QAAL,GAAgBrH,aAAasH,IAAb,CAAhB;AACA,cAAI,OAAKjH,YAAT,EAAuB,OAAKO,KAAL;AACxB,SAHD;AAIA,aAAKyG,QAAL,GAAgBrH,aAAasH,IAAb,CAAhB;AACD;AA9ZH;AAAA;AAAA,kCAgaoB;AAChBrH,oBAAY,KAAKoH,QAAjB;AACD;AAlaH;AAAA;AAAA,8BAoagB;AAAA;;AAAA,YACJvG,EADI,GACiB,IADjB,CACJA,EADI;AAAA,YACAY,IADA,GACiB,IADjB,CACAA,IADA;AAAA,YACMM,MADN,GACiB,IADjB,CACMA,MADN;;AAEZ,iCAAUA,MAAV,EAAkB,mBAAlB;AACA,YAAMuF,WAAW,KAAK7E,WAAL,EAAjB;AACA,YAAI,CAAC5B,EAAD,IAAO,CAACY,IAAR,IAAgB,CAAC,KAAKrB,YAA1B,EAAwC;AACtCkH,mBAAS5E,OAAT,CAAiB;AAAA,mBAAKC,EAAE4E,oBAAF,QAAL;AAAA,WAAjB;AACA;AACD;AACD,aAAKnH,YAAL,GAAoB,KAApB;AACAkH,iBAAS5E,OAAT,CAAiB;AAAA,iBAAKC,EAAE6E,kBAAF,QAAL;AAAA,SAAjB;AACA,YAAIzF,OAAO0F,UAAX,EAAuB1F,OAAO0F,UAAP,CAAkB5G,EAAlB;AACvB,YAAI;AACFY,eAAKd,KAAL;AACD,SAFD,CAEE,OAAOM,CAAP,EAAU;AACV,cAAIyG,SAAS,KAAb;AACAJ,mBAAS5E,OAAT,CAAiB,aAAK;AACpBgF,qBAAS/E,EAAEgF,kBAAF,CAAqB1G,CAArB,KAA2ByG,MAApC;AACD,WAFD;AAGA,cAAI,CAACA,MAAL,EAAa;AACX,gBACE1J,WACA+D,OAAO6F,UADP,IAEA3G,EAAE4G,WAHJ,CAGgB;AAHhB,cAIE;AACA9F,uBAAO6F,UAAP,CAAkB3G,CAAlB;AACD,eAND,MAMO;AACLe,sBAAQG,IAAR,CAAalB,CAAb;AACA,oBAAMA,CAAN;AACD;AACF;AACD;AACD;AACD,YAAIc,OAAO+F,SAAX,EAAsB/F,OAAO+F,SAAP,CAAiBjH,EAAjB;AACtByG,iBAAS5E,OAAT,CAAiB;AAAA,iBAAKC,EAAEoF,gBAAF,QAAL;AAAA,SAAjB;AACD;AAtcH;;AAAA;AAAA,8BAwBSC,SAxBT,GAwBqBzJ,gBAxBrB,SAyBS0J,iBAzBT,GAyBkE;AAC9D3F,eAAW,oBAAUlD,MAAV,CAAiBV,UADkC;AAE9D2D,cAAU,oBAAUjD,MAAV,CAAiBV,UAFmC;AAG9D6D,eAAW,oBAAUnD,MAAV,CAAiBV;AAHkC,GAzBlE;AAwcD,C","file":"createSurface.js","sourcesContent":["//@flow\nimport invariant from \"invariant\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport createShader from \"gl-shader\";\nimport Bus from \"./Bus\";\nimport Shaders from \"./Shaders\";\nimport Visitors from \"./Visitors\";\nimport { LoaderResolver } from \"webgltexture-loader\";\nimport type { NDArray } from \"ndarray\";\nimport type { ShaderIdentifier, ShaderInfo } from \"./Shaders\";\nimport type { Shader } from \"gl-shader\";\nimport type { VisitorLike } from \"./Visitor\";\nimport type { WebGLTextureLoader } from \"webgltexture-loader\";\nimport type Node from \"./Node\";\n\nconst __DEV__ = process.env.NODE_ENV === \"development\";\n\nconst prependGLSLName = (glsl: string, name: ?string) =>\n  !name ? glsl : \"#define SHADER_NAME \" + name + \"\\n\" + glsl;\n\ntype SurfaceProps = {\n  children?: any,\n  style?: Object,\n  preload?: Array<mixed>,\n  onLoad?: () => void,\n  onLoadError?: (e: Error) => void,\n  onContextLost?: () => void,\n  onContextRestored?: () => void,\n  visitor?: VisitorLike\n};\n\ninterface ISurface extends Component<SurfaceProps, *> {\n  props: SurfaceProps;\n  gl: ?WebGLRenderingContext;\n  RenderLessElement: React$ComponentType<*>;\n  root: ?Node;\n  id: number;\n\n  +mapRenderableContent: ?(inst: mixed) => mixed;\n  +getVisitors: () => Array<VisitorLike>;\n  +getGLSize: () => [number, number];\n  +getGLName: () => string;\n  +getGLShortName: () => string;\n  +captureAsDataURL: (...args: any) => string;\n  +captureAsBlob: (...args: any) => Promise<Blob>;\n  +capture: (x?: number, y?: number, w?: number, h?: number) => NDArray;\n  +redraw: () => void;\n  +flush: () => void;\n  +getEmptyTexture: () => WebGLTexture;\n  +glIsAvailable: () => boolean;\n\n  +rebootForDebug: () => void;\n  +_addGLNodeChild: (node: Node) => void;\n  +_removeGLNodeChild: (node: Node) => void;\n  +_resolveTextureLoader: (\n    raw: any\n  ) => { loader: ?WebGLTextureLoader<*>, input: mixed };\n  +_getShader: (shaderId: ShaderIdentifier) => Shader;\n  +_makeShader: (shaderInfo: ShaderInfo) => Shader;\n  +_draw: () => void;\n  +_bindRootNode: () => void;\n}\n\nexport type Surface = ISurface;\n\nexport type SurfaceContext = {\n  glParent: Node | Surface | Bus,\n  glSurface: Surface,\n  glSizable: { +getGLSize: () => [number, number] }\n};\n\nconst SurfacePropTypes = {\n  children: PropTypes.any.isRequired,\n  style: PropTypes.any,\n  preload: PropTypes.array,\n  onLoad: PropTypes.func,\n  onLoadError: PropTypes.func,\n  onContextLost: PropTypes.func,\n  onContextRestored: PropTypes.func,\n  visitor: PropTypes.object\n};\n\nlet surfaceId = 0;\nconst _instances: Array<ISurface> = [];\nexport const list = (): Array<ISurface> => _instances.slice(0);\n\nconst allSurfaceProps = Object.keys(SurfacePropTypes);\n\ntype SurfaceOpts = {\n  GLView: *,\n  RenderLessElement: React$ComponentType<*>,\n  mapRenderableContent?: (instance: mixed) => mixed,\n  requestFrame: (f: Function) => number,\n  cancelFrame: (id: number) => void\n};\n\nexport default ({\n  GLView,\n  RenderLessElement,\n  mapRenderableContent,\n  requestFrame,\n  cancelFrame\n}: SurfaceOpts): Class<ISurface> => {\n  /**\n   * **Renders the final tree of [Node](#node) in a WebGL Canvas / OpenGLView /...**\n   *\n   * `<Surface>` performs the final GL draws for a given implementation.\n   *\n   * `width` and `height` props are required for `gl-react-dom` and `gl-react-headless`, but are not supported for React Native, where the paradigm is to use `style` (and either use flexbox or set a width/height from there).\n   *\n   * > Surface is the only component that isn't \"universal\",\n   * therefore **Surface is exposed by the platform implementation**\n   * (`gl-react-dom` / `gl-react-native` / ...),\n   * unlike the rest of the API exposed through `gl-react`.\n   * Each platform have its own implementation but most props are shared.\n   * If you write a gl-react library, you shouldn't use `<Surface>` but only\n   * let the final user doing it. Therefore your code should remain platform-independant.\n   *\n   * @class Surface\n   * @extends Component\n   * @prop {any} children - a tree of React Element that renders some [Node](#node) and/or [Bus](#bus).\n   * @prop {number} [width] **(only for DOM)** - width of the Surface. multiplied by `pixelRatio` for the actual canvas pixel size.\n   * @prop {number} [height] **(only for DOM)** - height of the Surface. multiplied by `pixelRatio` for the actual canvas pixel size.\n   * @prop {object} [style] - CSS styles that get passed to the underlying `<canvas/>` or `<View/>`\n   * @prop {Array<any>} [preload] - an array of things to preload before the Surface start rendering. Help avoiding blinks and providing required textures to render an initial state.\n   * @prop {function} [onLoad] - a callback called when Surface is ready and just after it rendered.\n   * @prop {function(error:Error):void} [onLoadError] - a callback called when the Surface was not able to load initially.\n   * @prop {function} [onContextLost] - a callback called when the Surface context was lost.\n   * @prop {function} [onContextRestored] - a callback called when the Surface was restored and ready.\n   * @prop {Visitor} [visitor] - an internal visitor used for logs and tests.\n   *\n   * @prop {WebGLContextAttributes} [webglContextAttributes] **(gl-react-dom only)** a optional set of attributes to init WebGL with.\n   * @prop {number} [pixelRatio=window.devicePixelRatio] **(gl-react-dom only)** allows to override the pixelRatio. (default `devicePixelRatio`)\n   *\n   * @example\n   *\n   *  <Surface width={300} height={200}>\n   *    <Node shader={shaders.helloGL} />\n   *  </Surface>\n   *\n   * @example\n   *\n   *  <Surface width={200} height={100}>\n   *    <HelloGL />\n   *  </Surface>\n   *\n   * @example\n   *\n   *  <Surface width={200} height={100}>\n   *    <Blur factor={2}>\n   *      <Negative>\n   *        https://i.imgur.com/wxqlQkh.jpg\n   *      </Negative>\n   *    </Blur>\n   *  </Surface>\n   */\n  return class Surface extends Component<*, *> {\n    props: SurfaceProps;\n    id: number = ++surfaceId;\n    gl: ?WebGLRenderingContext;\n    buffer: WebGLBuffer;\n    loaderResolver: ?LoaderResolver;\n    glView: *;\n    root: ?Node;\n    shaders: { [key: string]: Shader } = {};\n    _preparingGL: Array<*> = [];\n    _needsRedraw: boolean = false;\n    state: {\n      ready: boolean,\n      rebootId: number,\n      debug: boolean\n    } = {\n      ready: false,\n      rebootId: 0,\n      debug: false\n    };\n\n    RenderLessElement = RenderLessElement;\n    mapRenderableContent = mapRenderableContent;\n\n    static propTypes = SurfacePropTypes;\n    static childContextTypes: { [_: $Keys<SurfaceContext>]: any } = {\n      glSurface: PropTypes.object.isRequired,\n      glParent: PropTypes.object.isRequired,\n      glSizable: PropTypes.object.isRequired\n    };\n\n    getChildContext(): SurfaceContext {\n      return {\n        glParent: this,\n        glSurface: this,\n        glSizable: this\n      };\n    }\n\n    componentDidMount() {\n      _instances.push(this);\n      this.getVisitors().forEach(v => v.onSurfaceMount(this));\n    }\n\n    componentWillUnmount() {\n      this._stopLoop();\n      this._destroyGL();\n      const i = _instances.indexOf(this);\n      if (i !== -1) _instances.splice(i, 1);\n      this.getVisitors().forEach(v => v.onSurfaceUnmount(this));\n    }\n\n    componentDidUpdate() {\n      this.redraw();\n    }\n\n    render() {\n      const { props, state: { ready, rebootId, debug } } = this;\n      const { children, style } = props;\n\n      // We allow to pass-in all props we don't know so you can hook to DOM events.\n      const rest = {};\n      Object.keys(props).forEach(key => {\n        if (allSurfaceProps.indexOf(key) === -1) {\n          rest[key] = props[key];\n        }\n      });\n\n      return (\n        <GLView\n          key={rebootId}\n          debug={debug}\n          ref={this._onRef}\n          onContextCreate={this._onContextCreate}\n          onContextFailure={this._onContextFailure}\n          onContextLost={this._onContextLost}\n          onContextRestored={this._onContextRestored}\n          style={style}\n          {...rest}\n        >\n          {ready ? children : null}\n        </GLView>\n      );\n    }\n\n    rebootForDebug() {\n      // FIXME: there is a bug somewhere that breaks rendering if this is called at startup time.\n      this._stopLoop();\n      this._destroyGL();\n      this.setState(({ rebootId }) => ({\n        rebootId: rebootId + 1,\n        ready: false,\n        debug: true\n      }));\n    }\n\n    getVisitors(): Array<VisitorLike> {\n      return Visitors.get().concat(this.props.visitor || []);\n    }\n\n    getGLSize(): [number, number] {\n      const { gl } = this;\n      return [gl ? gl.drawingBufferWidth : 0, gl ? gl.drawingBufferHeight : 0];\n    }\n\n    getGLName(): string {\n      return `Surface#${this.id}`;\n    }\n\n    getGLShortName(): string {\n      return \"Surface\";\n    }\n\n    /**\n     * see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL\n     * @param {string} mimeType (optional) the image MimeType\n     * @param {number} quality (optional) the image quality\n     * @memberof Surface\n     * @instance\n     */\n    captureAsDataURL(...args: any): string {\n      const { glView } = this;\n      invariant(glView, \"GLView is mounted\");\n      invariant(\n        glView.captureAsDataURL,\n        \"captureAsDataURL is not defined in %s\",\n        GLView.displayName || GLView.name\n      );\n      return glView.captureAsDataURL(...args);\n    }\n\n    /**\n     * see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob\n     * @param {string} mimeType (optional) the image MimeType\n     * @param {number} quality (optional) the image quality\n     * @memberof Surface\n     * @instance\n     */\n    captureAsBlob(...args: any): Promise<Blob> {\n      const { glView } = this;\n      invariant(glView, \"GLView is mounted\");\n      invariant(\n        glView.captureAsBlob,\n        \"captureAsBlob is not defined in %s\",\n        GLView.displayName || GLView.name\n      );\n      return glView.captureAsBlob(...args);\n    }\n\n    /**\n     * capture the root Node pixels. Make sure you have set `preserveDrawingBuffer: true` in `webglContextAttributes` prop.\n     * @memberof Surface\n     * @instance\n     */\n    capture(x?: number, y?: number, w?: number, h?: number): NDArray {\n      invariant(\n        this.root,\n        \"Surface#capture: surface is not yet ready or don't have any root Node\"\n      );\n      return this.root.capture(x, y, w, h);\n    }\n\n    /**\n     * Schedule a redraw of the Surface.\n     * @memberof Surface\n     * @instance\n     * @function\n     */\n    redraw = (): void => {\n      this._needsRedraw = true;\n    };\n\n    /**\n     * Force the redraw (if any) to happen now, synchronously.\n     * @memberof Surface\n     * @instance\n     * @function\n     */\n    flush = (): void => {\n      this._draw();\n    };\n\n    glIsAvailable(): boolean {\n      return !!this.gl;\n    }\n\n    _emptyTexture: ?WebGLTexture;\n    getEmptyTexture(): WebGLTexture {\n      let { gl, _emptyTexture } = this;\n      invariant(gl, \"getEmptyTexture called while gl was not defined\");\n      if (!_emptyTexture) {\n        this._emptyTexture = _emptyTexture = gl.createTexture();\n        gl.bindTexture(gl.TEXTURE_2D, _emptyTexture);\n        gl.texImage2D(\n          gl.TEXTURE_2D,\n          0,\n          gl.RGBA,\n          2,\n          2,\n          0,\n          gl.RGBA,\n          gl.UNSIGNED_BYTE,\n          new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n        );\n      }\n      return _emptyTexture;\n    }\n\n    _onContextCreate = (gl: WebGLRenderingContext): void => {\n      const onSuccess = () => {\n        this.setState(\n          {\n            ready: true\n          },\n          () => {\n            try {\n              this._handleLoad();\n            } catch (e) {\n              this._handleError(e);\n            }\n          }\n        );\n      };\n      this._prepareGL(gl, onSuccess, this._handleError);\n    };\n\n    _onContextFailure = (e: Error): void => {\n      this._handleError(e);\n    };\n\n    _onContextLost = (): void => {\n      if (this.props.onContextLost) this.props.onContextLost();\n      this._stopLoop();\n      this._destroyGL();\n      if (this.root) this.root._onContextLost();\n    };\n\n    _onContextRestored = (gl: WebGLRenderingContext) => {\n      if (this.root) this.root._onContextRestored(gl);\n      this._prepareGL(\n        gl,\n        this._handleRestoredSuccess,\n        this._handleRestoredFailure\n      );\n    };\n\n    _destroyGL() {\n      const { gl } = this;\n      if (gl) {\n        this.gl = null;\n        if (this._emptyTexture) {\n          gl.deleteTexture(this._emptyTexture);\n          this._emptyTexture = null;\n        }\n        if (this.loaderResolver) {\n          this.loaderResolver.dispose();\n        }\n        for (let k in this.shaders) {\n          this.shaders[k].dispose();\n        }\n        this.shaders = {};\n        gl.deleteBuffer(this.buffer);\n        this.getVisitors().map(v => v.onSurfaceGLContextChange(this, null));\n      }\n    }\n\n    _prepareGL(\n      gl: WebGLRenderingContext,\n      onSuccess: () => void,\n      onError: (e: Error) => void\n    ) {\n      this.gl = gl;\n      this.getVisitors().map(v => v.onSurfaceGLContextChange(this, gl));\n\n      this.loaderResolver = new LoaderResolver(gl);\n\n      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 1);\n\n      const buffer = gl.createBuffer();\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n      gl.bufferData(\n        gl.ARRAY_BUFFER,\n        new Float32Array([-1, -1, -1, 4, 4, -1]), // see a-big-triangle\n        gl.STATIC_DRAW\n      );\n      this.buffer = buffer;\n\n      const { preload } = this.props;\n\n      const all: Array<Promise<*>> = [];\n\n      (preload || []).forEach(raw => {\n        if (!raw) {\n          console.warn(\"Can't preload value\", raw);\n          return;\n        }\n        const { loader, input } = this._resolveTextureLoader(raw);\n        if (!loader) {\n          console.warn(\"Can't preload input\", raw, input);\n          return;\n        }\n        const loadedAlready = loader.get(input);\n        if (loadedAlready) return;\n        all.push(loader.load(input));\n      });\n\n      this._preparingGL = all;\n\n      if (all.length > 0) {\n        Promise.all(all).then(onSuccess, onError); // FIXME make sure this never finish if _prepareGL is called again.\n      } else {\n        onSuccess();\n      }\n    }\n\n    _onRef = (ref: ?GLView): void => {\n      this.glView = ref;\n    };\n\n    _addGLNodeChild(node: Node): void {\n      invariant(\n        !this.root,\n        \"Surface can only contains a single root. Got: %s\",\n        this.root && this.root.getGLName()\n      );\n      this.root = node;\n      node._addDependent(this);\n      this.redraw();\n    }\n    _removeGLNodeChild(node: Node): void {\n      this.root = null;\n      this.redraw();\n    }\n\n    _handleError = (e: Error): void => {\n      const { onLoadError } = this.props;\n      if (onLoadError) onLoadError(e);\n      else {\n        console.error(e);\n      }\n    };\n\n    _handleRestoredFailure = (): void => {\n      // there is nothing we can do. it's a dead end.\n    };\n\n    _handleRestoredSuccess = (): void => {\n      this.redraw();\n      this.flush();\n      this._startLoop();\n      if (this.props.onContextRestored) this.props.onContextRestored();\n    };\n\n    _handleLoad = (): void => {\n      if (!this.root) {\n        console.warn(\n          this.getGLName() + \" children does not contain any discoverable Node\"\n        );\n      }\n      const { onLoad } = this.props;\n      this.redraw();\n      this.flush();\n      this._startLoop();\n      if (onLoad) onLoad();\n    };\n\n    _resolveTextureLoader(\n      raw: mixed\n    ): { loader: ?WebGLTextureLoader<*>, input: any } {\n      let input = raw;\n      let loader: ?WebGLTextureLoader<*> =\n        this.loaderResolver && this.loaderResolver.resolve(input);\n      return { loader, input };\n    }\n\n    _makeShader({ frag, vert }: ShaderInfo, name?: string): Shader {\n      const { gl } = this;\n      invariant(gl, \"gl is not available\");\n      const shader = createShader(\n        gl,\n        prependGLSLName(vert, name),\n        prependGLSLName(frag, name)\n      );\n      shader.attributes._p.pointer();\n      return shader;\n    }\n\n    _getShader(shaderId: ShaderIdentifier): Shader {\n      const { shaders } = this;\n      return (\n        shaders[shaderId.id] ||\n        (shaders[shaderId.id] = this._makeShader(\n          Shaders.get(shaderId),\n          Shaders.getName(shaderId)\n        ))\n      );\n    }\n\n    _bindRootNode(): void {\n      const { gl } = this;\n      invariant(gl, \"gl context not available\");\n      gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n      const [width, height] = this.getGLSize();\n      gl.viewport(0, 0, width, height);\n    }\n\n    _loopRaf: any;\n    _startLoop(): void {\n      cancelFrame(this._loopRaf);\n      const loop = () => {\n        this._loopRaf = requestFrame(loop);\n        if (this._needsRedraw) this._draw();\n      };\n      this._loopRaf = requestFrame(loop);\n    }\n\n    _stopLoop(): void {\n      cancelFrame(this._loopRaf);\n    }\n\n    _draw(): void {\n      const { gl, root, glView } = this;\n      invariant(glView, \"GLView is mounted\");\n      const visitors = this.getVisitors();\n      if (!gl || !root || !this._needsRedraw) {\n        visitors.forEach(v => v.onSurfaceDrawSkipped(this));\n        return;\n      }\n      this._needsRedraw = false;\n      visitors.forEach(v => v.onSurfaceDrawStart(this));\n      if (glView.beforeDraw) glView.beforeDraw(gl);\n      try {\n        root._draw();\n      } catch (e) {\n        let silent = false;\n        visitors.forEach(v => {\n          silent = v.onSurfaceDrawError(e) || silent;\n        });\n        if (!silent) {\n          if (\n            __DEV__ &&\n            glView.debugError &&\n            e.longMessage /* duck typing an \"interesting\" GLError (from lib gl-shader) */\n          ) {\n            glView.debugError(e);\n          } else {\n            console.warn(e);\n            throw e;\n          }\n        }\n        return;\n      }\n      if (glView.afterDraw) glView.afterDraw(gl);\n      visitors.forEach(v => v.onSurfaceDrawEnd(this));\n    }\n  };\n};\n"]}