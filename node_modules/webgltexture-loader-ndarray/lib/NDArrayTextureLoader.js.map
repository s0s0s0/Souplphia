{"version":3,"sources":["../src/NDArrayTextureLoader.js"],"names":["NDArrayTextureLoader","gl","floatSupported","getExtension","obj","shape","data","stride","input","texture","createTexture","bindTexture","TEXTURE_2D","width","height","get","add"],"mappings":";;;;;;;;;;AACA;;AAKA;;;;;;;;;;;;IAEMA,oB;;;AAEJ,gCAAYC,EAAZ,EAAmB;AAAA;;AAAA,4IACXA,EADW;;AAEjB,UAAKC,cAAL,GACED,GAAGE,YAAH,CAAgB,mBAAhB,KACAF,GAAGE,YAAH,CAAgB,0BAAhB,CAFF;AAFiB;AAKlB;;;;4BAEOC,G,EAAU;AAChB,aAAOA,IAAIC,KAAJ,IAAaD,IAAIE,IAAjB,IAAyBF,IAAIG,MAApC;AACD;;;8BAESC,K,EAAgB;AACxB,aAAOA,KAAP;AACD;;;+BAEUA,K,EAAgB;AAAA,UACjBP,EADiB,GACV,IADU,CACjBA,EADiB;;AAEzB,UAAMQ,UAAUR,GAAGS,aAAH,EAAhB;AACAT,SAAGU,WAAH,CAAeV,GAAGW,UAAlB,EAA8BH,OAA9B;;AAHyB,wCAIDD,MAAMH,KAJL;AAAA,UAIlBQ,KAJkB;AAAA,UAIXC,MAJW;;AAKzB,wCAAmBb,EAAnB,EAAuBQ,OAAvB,EAAgCD,KAAhC,EAAuC,KAAKN,cAA5C;AACA,aAAO,EAAEO,gBAAF,EAAWI,YAAX,EAAkBC,cAAlB,EAAP;AACD;;;2BAEMN,K,EAAgB;AACrB;AADqB,UAEbP,EAFa,GAEN,IAFM,CAEbA,EAFa;;AAAA,iBAGD,KAAKc,GAAL,CAASP,KAAT,CAHC;AAAA,UAGbC,OAHa,QAGbA,OAHa;;AAIrBR,SAAGU,WAAH,CAAeV,GAAGW,UAAlB,EAA8BH,OAA9B;AACA,wCAAmBR,EAAnB,EAAuBQ,OAAvB,EAAgCD,KAAhC,EAAuC,KAAKN,cAA5C;AACD;;;;;;AAGH,mCAAec,GAAf,CAAmBhB,oBAAnB;;kBAEeA,oB","file":"NDArrayTextureLoader.js","sourcesContent":["//@flow\nimport {\n  WebGLTextureLoaderSyncHashCache,\n  globalRegistry\n} from \"webgltexture-loader\";\nimport type { NDArray } from \"ndarray\";\nimport drawNDArrayTexture from \"./drawNDArrayTexture\";\n\nclass NDArrayTextureLoader extends WebGLTextureLoaderSyncHashCache<NDArray> {\n  floatSupported: boolean;\n  constructor(gl: *) {\n    super(gl);\n    this.floatSupported =\n      gl.getExtension(\"OES_texture_float\") &&\n      gl.getExtension(\"OES_texture_float_linear\");\n  }\n\n  canLoad(obj: any) {\n    return obj.shape && obj.data && obj.stride;\n  }\n\n  inputHash(input: NDArray) {\n    return input;\n  }\n\n  getNoCache(input: NDArray) {\n    const { gl } = this;\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    const [width, height] = input.shape;\n    drawNDArrayTexture(gl, texture, input, this.floatSupported);\n    return { texture, width, height };\n  }\n\n  update(input: NDArray) {\n    // For now we assume the NDArray always change & need a redraw but we might try to only update if changes later\n    const { gl } = this;\n    const { texture } = this.get(input);\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    drawNDArrayTexture(gl, texture, input, this.floatSupported);\n  }\n}\n\nglobalRegistry.add(NDArrayTextureLoader);\n\nexport default NDArrayTextureLoader;\n"]}